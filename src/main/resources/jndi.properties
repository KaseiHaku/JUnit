################################ Simple-JNDI Basic ################################
# 1. 当前文件必须存在于 classpath 根目录中，不能是子目录
# 2. 当前文件名必须为 jndi.properties
# 3. 当前文件搜索顺序为 system classpath 根目录(即: System.getProperty("user.dir")) 和 $JAVA_HOME/lib/， 注意不会递归搜索子目录


################################ mandatory value: 强制必须存在的属性 ################################
# 指定 jndi 所使用的工厂类
java.naming.factory.initial = org.osjava.sj.SimpleJndiContextFactory

# 当不通过代码创建 上下文实例 时，该属性用于定义 根据哪些配置文件创建 JNDI Context 实例
# absolute directory: 文件系统绝对路径
#org.osjava.sj.root = /home/hen/gj/simple-jndi/config/
# relative directory: 相对于 classpath 根目录的相对路径
#org.osjava.sj.root = config/
# multiple path: 指定多个 file 和 direcotry，Linux 下为 : 分隔，Windows 下为 ; 分隔，
# 分隔符默认跟环境变量 PATH 的分隔符一致，可以通过 org.osjava.sj.pathSeparator 自定义
# new InitialContext().lookup("xxx.yyy.zzz")  中 xxx 是 org.osjava.sj.root 下的 fileName, dirName, keyName.
# org.osjava.sj.root 本身不需要添加到 "xxx.yyy.zzz" 中
# @trap 该 key 的 value 中配置的路径是 相对于工作目录的，不是 classpath 的
org.osjava.sj.root = jndi/default.properties:config/
# 从 classpath 的 jar 包中加载 file 或 directory，注意 封装在 war 包 或者 uber jar 中的 jar 不行
#org.osjava.sj.root = jarMarkerClass=any.class.in.Jar,root=/root/in/jar
# 自定义 org.osjava.sj.root value 中的分隔符
org.osjava.sj.pathSeparator = :

# 因为一个 .properties 文件就对应一个 JNDI Context 实例，
# true 表示所有的 Context 实例共享内存，即：相互可见，这样可以避免同一份配置文件，有多个 Context 实例，造成浪费
org.osjava.sj.jndi.shared = true

# 配置了该属性，在代码中需要使用 / 来分隔属性，例如：jndiCtx.lookup("a/b/c") 而不是 jndiCtx.lookup("a.b.c")
#org.osjava.sj.delimiter = /

#org.osjava.sj.space = java:src/main/resources

